To create a migration file for users table
-db-migrate create users db-migrate --sql-file

Solution to why the my server was freezing
The connection to the db was that i wasnt closing the connection at every condition. Using a finally block
will ensure the connection is always closed regardless of anything that happens

- Since my loadLgasTable and loadStatesTable are async functions as oppose to the other middlewares that are synchronous, i should use a 
finally block in my try catch and the finally block should ensure the connection is always released and the next middleware is always called.
-which i have done and it works, second option will be to load the loadLgasTable and loadStatesTable before the server starts running
-by adding it as a script and calling running it in package.json file. So i will chain the commands. 

I tried both methods. Both works. Sticking with the scipt method

reject({ "Invalid Lga_id for state_id provided. Valid Lga id Include": allLgas })

I had an issue with throwing an object as an error. It was showing what i wanted so i reverted to reject and resolve.
        throw new Error({ "Dami": "New Error" })
Basically when you throw an object as an error, js doesnt return the object you have thrown instead it returns this
Error: [object Object].
but using reject it gets handled better.